class Matrix:
    MAX_SIZE = 10

    def __init__(self, max_size=None):
        self.max_size = max_size

        if max_size is None:
            self.matrix = [None for _ in range(1 * 1)]
        elif max_size <= Matrix.MAX_SIZE:
            self.matrix = [None for _ in range(max_size * max_size)]
        elif max_size > Matrix.MAX_SIZE:
            self.matrix = [None for _ in range(Matrix.MAX_SIZE * Matrix.MAX_SIZE)]

    def __str__(self):
        """магический метод" _str_ возвращающий строковое представление матрицы - строку, в которой строки матрицы
        разделены переносом строки, а элементы строки разделены пробелами, необходим для вывода матрицы на печать.
        """
        result = ''
        size = int(len(self.matrix) ** 0.5)
        for row in range(size):
            result += ' '.join([str(i) for i in self.matrix[size * row:size * (row + 1)]]) + '\n'
        return result

    def append(self, element=None):
        """метод append, отвечающий за добавление элемента в матрицу. Увеличивает размер матрицы, если необходимо.
        Правила добавления элементов к матрице:
        - матрица заполняется построчно, слева-направо, с первой строки до последней
        - добавляемый элемент занимает позицию первого свободного "нулевого" элемента
        - добавление "нулевого" элемента (None) игнорируется
        - при достижении максимально допустимого размера матрицы добавляет элементы в матрицу, пока в ней есть "нулевые"
          элементы.
        - Попытка добавить элемент в полностью заполненную матрицу(не имеющей "нулевых" элементов) вызывает исключение 
        IndexError
        - в случае, когда добавляемый элемент, занимает место первого элемента в последней строке матрицы,
          матрицу необходимо "расширить", увеличив размер матрицы на 1 (добавить один столбец и одну строку),
          при этом добавленные в матрицу элементы сдвигаются к началу таким образом, чтобы между ними не было
          "нулевых" элементов.
          """
        # если добавляемый элемент - None, возвращаем матрицу
        if element is None:
            return self.matrix

        # узнаем индекс первого "нулевого" элемента
        idx = self.matrix.index(None)

        # добавляем элемент
        self.matrix[idx] = element
        # определяем размер матрицы
        size = int(len(self.matrix) ** 0.5)

        # проверяем нужно ли увеличивать размер матрицы
        if idx == size * (size - 1):
            # увеличиваем размер матрицы
            self.matrix.extend([None, ] * ((size + 1) ** 2 - len(self.matrix)))
